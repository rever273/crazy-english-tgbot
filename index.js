require('dotenv').config(); //{ path: ".env.development" }

const { session, Bot, InlineKeyboard, InputFile } = require('grammy');
const path = require('path');
const { I18n } = require('@grammyjs/i18n');
const axios = require('axios');
const config = require('./config');
const cron = require('node-cron');
const trimDisplayName = require('./clearName');

const { Crypto, UserString } = require('./functions');
const Subscription = require('./checkUserSubscription');
const { checkAndSendMistakeReports } = require('./checkUsersReport');
const User = require('./user');
// const fs = require('fs');

process.env.NODE_NO_WARNINGS = '1';
const BOT_TOKEN = process.env.BOT_TOKEN;
const urlBack = process.env.URL_BACK;

const bot = new Bot(BOT_TOKEN); // –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–∞—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
cron.schedule('*/30 * * * *', () => {
    //TODO –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    checkAndSendMistakeReports(bot);
});

//–†–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cron.schedule('* 2 * * *', () => {
    Subscription.checkAllUsersSubscription(bot);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18n
const i18n = new I18n({
    defaultLocale: 'en', // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    // fallbackLocale: 'en',
    directory: path.join(__dirname, './src/locales'), // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
    resolveUserLanguage: (ctx) => ctx.from?.language_code || 'en',
    useSession: false,
    globalTranslationContext(ctx) {
        return { name: ctx.from?.first_name ?? '' };
    },
});

bot.use(
    session({
        initial: () => ({}), // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    })
);

// Middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(i18n.middleware());

// bot.use(async (ctx, next) => {
//     console.log("Language detected:", ctx.i18n?.locale ?? "No language set");
//      await next();
// });

bot.catch((err) => {
    console.error('Error in middleware:', err);
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.command('start', async (ctx) => {
    const text = ctx.message.text;
    const user = new User(ctx.from);

    console.log(1);

    //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const opration = await userRegistrationOrUpdate(ctx);

    console.log(opration, 'opration');

    //–ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏ –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (opration === 'create') await checkReferralCode(ctx, text);

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ—Ä–æ–Ω—Ç–∞ webapp
    if (ctx.match === 'check_subscription') {
        const { subscribed_chat, subscribed_channel } =
            await Subscription.checkUserSubscription(ctx, ctx.from.id);

        if (subscribed_chat) {
            ctx.reply('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç Crazy Llama Chat');
        } else {
            ctx.reply(
                '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç Crazy Llama Chat @CrazyLlamaFarmRU_chat'
            );
        }

        if (subscribed_channel) {
            ctx.reply('‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª Crazy Llama Channel');
        } else {
            ctx.reply(
                '‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª Crazy Llama Channel @CrazyLlamaFarmRU'
            );
        }

        //–ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
        if (subscribed_chat && subscribed_channel) {
            return ctx.reply('üëç –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã');
        }
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userLanguage = ctx.from.language_code || 'en';
    ctx.i18n.useLocale(userLanguage);

    const encryptedId = Crypto.encryptUserId(user.user_id); // –®–∏—Ñ—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const referralCode = `invite_${encryptedId}`;
    const referralLink = `${process.env.BOT_URL}?start=${referralCode}`;

    const imagePath = path.join(__dirname, './src/images/banner.jpg');

    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const msg_text = `${ctx.t('welcome.hi')}\n
${ctx.t('welcome.invite')}\n
${ctx.t('invite_link', { link: referralLink })}`;

    // console.time("replyWithPhoto"); // –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

    const sentMessage = await ctx.replyWithPhoto(new InputFile(imagePath), {
        caption: msg_text,
        parse_mode: 'HTML',
        reply_markup: new InlineKeyboard()
            // .webApp(ctx.t("btn.open"), "https://forward2.hive-dev.ru/welcome")
            .webApp(ctx.t('btn.open'), process.env.WEBSITE)
            .row()
            // .url("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", shareUrl)
            .url(ctx.t('btn.support'), config.supportBot)
            .switchInline(ctx.t('btn.share'), referralCode),
    });

    // console.timeEnd("replyWithPhoto");

    //–ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const chat = await ctx.api.getChat(ctx.chat.id);
    if (!chat.pinned_message?.message_id) {
        await ctx.api.pinChatMessage(ctx.chat.id, sentMessage.message_id);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∏—Ö –≤ –±–∞–∑—É
//–ü—Ä–∏–º—á–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
bot.on(['message:new_chat_members', 'chat_member'], async (ctx) => {
    const newMembers = getNewChatMembers(ctx);

    if (!newMembers.length) return;

    for (const user of newMembers) {
        const userId = String(user.id);

        try {
            const chatId = ctx.chat.id;
            const channelData = Subscription.ourChannels.find(
                (c) => c.id === chatId
            );

            if (!channelData) return;

            const updateData = {
                tgId: userId,
            };

            if (channelData.type === 'chat') updateData.subscribed_chat = true;
            if (channelData.type === 'channel')
                updateData.subscribed_channel = true;

            await axios.put(`${urlBack}/update/`, updateData);

            console.log(
                `[Bot New Member] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤ ${
                    ctx.chat.title
                }, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ. ${UserString(ctx.from)}`
            );
        } catch (error) {
            console.error(
                '[Bot New Member] Error updating subscription status:',
                error.response?.data || error.message
            );
        }
    }
});

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
 */
const getNewChatMembers = (ctx) => {
    let newMembers = [];

    if (ctx.message) {
        if (ctx.message.new_chat_participant) {
            newMembers = [ctx.message.new_chat_participant];
        } else if (ctx.message.new_chat_member) {
            newMembers = [ctx.message.new_chat_member];
        } else if (ctx.message.new_chat_members) {
            newMembers = ctx.message.new_chat_members;
        }
    } else if (ctx.update && ctx.update.chat_member) {
        const newChatMember = ctx.update.chat_member.new_chat_member?.user;
        if (newChatMember) {
            newMembers = [newChatMember];
        }
    }

    return newMembers;
};

bot.command('help', async (ctx) => {
    const imagePath = path.join(__dirname, './src/images/support_llama.jpg');

    await ctx.replyWithPhoto(new InputFile(imagePath), {
        caption: ctx.t('support.title'),
        parse_mode: 'HTML',
        reply_markup: new InlineKeyboard()
            .url(ctx.t('btn.support'), config.supportBot)
            .row()
            .webApp(ctx.t('btn.open'), 'https://testo.crazyllama.app'),
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
bot.inlineQuery(/^invite_(.+)$/, async (ctx) => {
    const encryptedId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∏–∑ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
    const userLanguage = ctx.from.language_code || 'en'; // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.i18n.useLocale(userLanguage);

    const user = new User(ctx.from);
    const thumbUrl = `${process.env.WEBSITE}/images/tg_bot/inline_llama_thumb.jpg`;

    const displayName = user.username
        ? `@${user.username}`
        : user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞ preview-—Å—Ç—Ä–∞–Ω–∏—Ü—É
    // const previewUrl = `http://localhost:3000/api/users/preview/${displayName}/${encryptedId}`;
    const previewUrl = `${process.env.WEBSITE}/api/users/preview/${displayName}/${encryptedId}`;

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
    const results = [
        {
            type: 'article',
            id: encryptedId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            title: ctx.t('inline.title'),
            description: ctx.t('inline.description'),
            thumb_url: `${thumbUrl}`, // –ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ ?v=${Date.now()}
            input_message_content: {
                message_text: `<a href="${previewUrl}">ü¶ôü¶ôü¶ô</a>`,
                parse_mode: 'HTML',
                disable_web_page_preview: false, // –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
            },
            reply_markup: new InlineKeyboard().url(
                ctx.t('btn.study'),
                `${process.env.BOT_URL}?start=invite_${encryptedId}` // –¢–µ–ø–µ—Ä—å –≤–µ–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å Open Graph –ø—Ä–µ–≤—å—é
            ),
        },
    ];

    await ctx.answerInlineQuery(results);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
async function checkReferralCode(ctx, text) {
    if (text.includes(' ')) {
        const args = text.split(' '); // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã

        if (args.length > 1) {
            let referralCode = args[1].startsWith('invite_')
                ? args[1].replace('invite_', '')
                : args[1]; //–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π ID

            const user_id = ctx.from.id;

            const referral_id = Crypto.decryptUserId(referralCode); // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º ID

            //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            if (!referral_id || referral_id === '' || user_id === referral_id) {
                return;
            }

            // const data = {
            //     tgId: referral_id,
            //     referral: {
            //         tgId: ctx.from.id,
            //         username: ctx.from.username,
            //     },
            // };

            const data = {
                tgId: user_id,
                refTgId: referral_id,
            };

            await axios.post(`${urlBack}/users/ref`, data);

            console.log(
                `[Bot Referral] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${UserString(
                    ctx.from
                )} –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID ${referral_id}`
            );
        }
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function userRegistrationOrUpdate(ctx) {
    const { subscribed_chat, subscribed_channel } =
        await Subscription.checkUserSubscription(
            ctx,
            ctx.from.id,
            (operation = 'create')
        );

    const data = {
        tgId: ctx.from.id, //BIGINT (–£–±—Ä–∞—Ç—å String)
        userName: ctx.from?.username || '', //String
        firstName: ctx.from.first_name, //String
        lastName: ctx.from?.last_name || '', //String
        languageCode: ctx?.from?.language_code || 'en', //String
        isPremium: ctx?.from?.is_premium || false, //Boolean
        added_to_attachment_menu: ctx?.from?.added_to_attachment_menu || false, //Boolean
        subscribed_chat, //Boolean –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
        subscribed_channel, //Boolean –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
    };

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        const response = await axios.get(`${urlBack}/${data.tgId}`);
        const existingUser = response?.data;

        if (existingUser?.tgId) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            const hasChanges = Object.keys(data).some(
                (key) => data[key] !== existingUser[key]
            );

            if (hasChanges) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                await axios.put(`${urlBack}/update/`, data);
                console.log(
                    `[Bot Start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${UserString(ctx.from)}`
                );
                return 'update';
            }
        }
    } catch (error) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        await axios.post(urlBack, data);
        console.log(
            `[Bot Start] –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${UserString(
                ctx.from
            )}`
        );
        return 'create';
    }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
