require("dotenv").config({ path: ".env.development" });

const { session, Bot, InlineKeyboard, InputFile } = require("grammy");
const path = require("path");
const { I18n } = require("@grammyjs/i18n");
const axios = require("axios");
const config = require("./config");

const { Crypto, UserString } = require("./functions");
const Subscription = require("./checkUserSubscription");
const User = require("./user");
// const fs = require('fs');

process.env.NODE_NO_WARNINGS = "1";
const BOT_TOKEN = process.env.BOT_TOKEN;
const urlBack = process.env.URL_BACK;

const bot = new Bot(BOT_TOKEN); // –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è i18n
const i18n = new I18n({
  defaultLocale: "en", // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  // fallbackLocale: 'en',
  directory: path.join(__dirname, "./src/locales"), // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
  resolveUserLanguage: (ctx) => ctx.from?.language_code || "en",
  useSession: false,
  globalTranslationContext(ctx) {
    return { name: ctx.from?.first_name ?? "" };
  },
});

bot.use(
  session({
    initial: () => ({}), // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
  })
);

// Middleware –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(i18n.middleware());

// bot.use(async (ctx, next) => {
//     console.log("Language detected:", ctx.i18n?.locale ?? "No language set");
//      await next(); 
// });

bot.catch((err) => {
  console.error("Error in middleware:", err);
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
bot.command("start", async (ctx) => {
  const text = ctx.message.text;
  const user = new User(ctx.from);

  //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const userData = await userRegistration(ctx);

  //–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ webapp
  if (ctx.match === "check_subscription") {
    if (userData.subscribed_chat) {
      ctx.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç Crazy Llama Chat");
    }
    else {
      ctx.reply("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç Crazy Llama Chat");
    }

    if (userData.subscribed_channel) {
      ctx.reply("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª Crazy Llama Channel");
    }
    else {
      ctx.reply("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª Crazy Llama Channel");
    }

    //TODO –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ webapp, –Ω–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫. 
    //–ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
    if (userData.subscribed_chat && userData.subscribed_channel) {
      return ctx.reply("üëç –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã");
    }
  }

  //–ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ª–∏ –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await checkReferralCode(ctx, text);

  // –ü–æ–ª—É—á–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userLanguage = ctx.from.language_code || "en";
  ctx.i18n.useLocale(userLanguage);

  const encryptedId = Crypto.encryptUserId(user.user_id); // –®–∏—Ñ—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const referralCode = `invite_${encryptedId}`;
  const referralLink = `${config.botUrl}?start=${referralCode}`;

  const imagePath = path.join(__dirname, "./src/images/banner.jpg");

  //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const msg_text = `${ctx.t("welcome.hi")}\n
${ctx.t("welcome.invite")}\n
${ctx.t("invite_link", { link: referralLink })}`;

  // console.time("replyWithPhoto"); // –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

  const sentMessage = await ctx.replyWithPhoto(new InputFile(imagePath), {
    caption: msg_text,
    parse_mode: "HTML",
    reply_markup: new InlineKeyboard()
      // .webApp(ctx.t("btn.open"), "https://forward2.hive-dev.ru/welcome")
      .webApp(ctx.t("btn.open"), process.env.WEBSITE)
      .row()
      // .url("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", shareUrl)
      .url(ctx.t("btn.support"), config.supportBot)
      .switchInline(ctx.t("btn.share"), referralCode),
  });

  // console.timeEnd("replyWithPhoto");

  //–ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const chat = await ctx.api.getChat(ctx.chat.id);
  if (!chat.pinned_message) {
    await ctx.api.pinChatMessage(ctx.chat.id, sentMessage.message_id);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —á–∞—Ç –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∏—Ö –≤ –±–∞–∑—É
//–ü—Ä–∏–º—á–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
bot.on(['message:new_chat_members', 'chat_member'], async (ctx) => {
  const newMembers = getNewChatMembers(ctx);

  if (!newMembers.length) return;

  for (const user of newMembers) {
    const userId = String(user.id);

    try {
      const chatId = ctx.chat.id;
      const channelData = Subscription.ourChannels.find((c) => c.id === chatId);
      if (!channelData) return;

      const updateData = {
        tgId: userId,
      };

      if (channelData.type === 'chat') updateData.subscribed_chat = true;
      if (channelData.type === 'channel') updateData.subscribed_channel = true;

      await axios.put(`${urlBack}/update/`, updateData);
      console.log(`[Bot New Member] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –≤ ${ctx.chat.title}, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ. ${UserString(ctx.from)}`);

    } catch (error) {
      console.error("[Bot New Member] Error updating subscription status:", error.response?.data || error.message);
    }
  }
});

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @returns {Array} –ú–∞—Å—Å–∏–≤ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
 */
const getNewChatMembers = (ctx) => {
  let newMembers = [];

  if (ctx.message) {
    if (ctx.message.new_chat_participant) {
      newMembers = [ctx.message.new_chat_participant];
    } else if (ctx.message.new_chat_member) {
      newMembers = [ctx.message.new_chat_member];
    } else if (ctx.message.new_chat_members) {
      newMembers = ctx.message.new_chat_members;
    }
  } else if (ctx.update && ctx.update.chat_member) {
    const newChatMember = ctx.update.chat_member.new_chat_member?.user;
    if (newChatMember) {
      newMembers = [newChatMember];
    }
  }

  return newMembers;
};

bot.command("help", async (ctx) => {
  const imagePath = path.join(__dirname, "./src/images/support_llama.jpg");

  await ctx.replyWithPhoto(new InputFile(imagePath), {
    caption: ctx.t("support.title"),
    parse_mode: "HTML",
    reply_markup: new InlineKeyboard()
      .url(ctx.t("btn.support"), config.supportBot)
      .row()
      .webApp(ctx.t("btn.open"), "https://testo.crazyllama.app"),
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
bot.inlineQuery(/^invite_(.+)$/, async (ctx) => {
  const encryptedId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∏–∑ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞
  const userLanguage = ctx.from.language_code || "en"; // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  ctx.i18n.useLocale(userLanguage);

  const user = new User(ctx.from);
  const thumbUrl = `${config.website}/images/tg_bot/inline_llama_thumb.jpg`;

  // console.log("4951_thumbUrl==>", thumbUrl);
  // console.log("4951_imageUrl==>", imageUrl);

  const displayName = user.username ? `@${user.username}` : user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞ preview-—Å—Ç—Ä–∞–Ω–∏—Ü—É

  //TODO –ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∞–π—Ç –ø–æ –∞–ø–∏, –≥–¥–µ –Ω–∞ –±–µ–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –¢–ì –±–æ—Ç–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
  //–°–µ–π—á–∞—Å —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç.–∫. –Ω–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∫–µ
  const previewUrl = `${config.website}/api/users/preview?` +
    `username=${encodeURIComponent(displayName)}&` +
    `encryptedId=${encryptedId}`;

  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
  const results = [
    {
      type: "article",
      id: encryptedId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      title: ctx.t("inline.title"),
      description: ctx.t("inline.description"),
      thumb_url: `${thumbUrl}?v=${Date.now()}`, // –ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏
      input_message_content: {
        message_text: `<a href="${previewUrl}">ü¶ôü¶ôü¶ô</a>`,
        parse_mode: "HTML",
        disable_web_page_preview: false, // –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
      },
      reply_markup: new InlineKeyboard().url(
        ctx.t("btn.study"),
        previewUrl // –¢–µ–ø–µ—Ä—å –≤–µ–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å Open Graph –ø—Ä–µ–≤—å—é
      ),
    },
  ];

  await ctx.answerInlineQuery(results);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
async function checkReferralCode(ctx, text) {
  if (text.includes(" ")) {
    const args = text.split(" "); // –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    if (args.length > 1) {
      let referralCode = args[1].startsWith("invite_")
        ? (referralCode = args[1].replace("invite_", ""))
        : args[1]; //–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π ID

      const user_id = ctx.from.id;
      const referral_id = Crypto.decryptUserId(referralCode); // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º ID

      //–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞
      if (!referral_id || referral_id == "" || user_id == referral_id) {
        return;
      }

      console.log(`[Bot Referral] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${UserString(ctx.from)} –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å ID ${referral_id}`);
      //TODO –î–æ–±–∞–≤–∏—Ç—å –∫ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–Ω–∞—á–µ–Ω–∏–µ referral_id –≤ –∫–æ–ª–æ–Ω–∫—É referral –≤ DB
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function userRegistration(ctx) {
  const { subscribed_chat, subscribed_channel } = await Subscription.checkUserSubscription(ctx, ctx.from.id);

  const data = {
    tgId: String(ctx.from.id), //BIGINT (–£–±—Ä–∞—Ç—å String)
    userName: ctx.from?.username || "", //String
    firstName: ctx.from.first_name, //String
    lastName: ctx.from?.last_name || "",  //String
    languageCode: ctx?.from?.language_code || "en", //String
    isPremium: ctx?.from?.is_premium || false, //Boolean
    added_to_attachment_menu: ctx?.from?.added_to_attachment_menu || false, //Boolean
    //TODO –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã
    subscribed_chat, //Boolean –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
    subscribed_channel //Boolean –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
  };

  console.log("0707_subscribed_chat, subscribed_channel==>", subscribed_chat, subscribed_channel);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    const response = await axios.get(`${urlBack}/${data.tgId}`);
    const existingUser = response?.data;

    if (!existingUser?.tgId) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      await axios.post(urlBack, data);
      console.log(`[Bot Start] –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${UserString(ctx.from)}`);
    }
    else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
      const hasChanges = Object.keys(data).some((key) => data[key] !== existingUser[key]);
      if (hasChanges) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        await axios.put(`${urlBack}/update/`, data);
        console.log(`[Bot Start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${UserString(ctx.from)}`);
      }
    }
  } catch (error) {
    console.error("[Bot Start] Error during registration:", error.response?.data || error.message);
  }

  return data;
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
