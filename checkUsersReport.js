const { api } = require('./tokenManager');
const config = require('./config');

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
async function checkAndSendMistakeReports(bot) {

    if (global.isLocal) {
        console.log('[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.');
        // return;
    }

    // console.log('[MistakeReport] –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö...');

    try {
        const reports = await fetchMistakeReports();

        if (reports && reports.length > 0) {
            console.log(`[MistakeReport] –ù–∞–π–¥–µ–Ω–æ ${reports.length} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö.`);
            for (const report of reports) {
                const messageText = formatReportMessage(report).slice(0, 990);
                try {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
                    const res = await bot.api.sendPhoto(
                        process.env.CHAT_ID_REPORT,
                        `${config.website}/images/dictionary/${report.imageUrl}.jpg`,
                        { caption: messageText, parse_mode: 'HTML' }
                    );

                    if (res && res.message_id) {
                        console.log(`[MistakeReport] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¢–ì —Å–æ–æ–±—â–µ–Ω–∏–µ #${report.id} –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —Å–ª–æ–≤–∞ "${report.wordText}"`);
                        await api.put(`${global.BACKEND_URL}/words/report/${report.id}`, { sentToTg: true });
                    }
                } catch (err) {
                    console.error('[MistakeReport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', err);
                }
            }
        } else {
            console.log('[MistakeReport] –ù–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }
    } catch (err) {
        console.error('[MistakeReport] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö:', err);
    }
}

/**
   * @returns {Promise<Array<Object>>} ‚Äì
   */
async function fetchMistakeReports() {
    const response = await api.get(`${global.BACKEND_URL}/words/report`);
    return response.data;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ —Å —ç–º–æ–¥–∂–∏.
 * @param {Object} report ‚Äì –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∏
 * @returns {string} ‚Äì –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
 */
function formatReportMessage(report) {

    const translation = report?.word?.translation.find((item) => item.id === report.translationIndex);
    // console.log("2149_report==>", report);

    return (
        `üö® <b>–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–ª–æ–≤–µ #${report.id}!</b>\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>@${report.username} (ID: ${report.userId})</b>\n\n` +

        `üî§ –°–ª–æ–≤–æ: <b>${report.wordText}</b> <i>(word_id: ${report.wordId}, level: ${report?.word?.level})</i>\n` +
        `‚ñ´Ô∏è translation: <b>${translation.translation}</b> <i>(#${report.translationIndex})</i>\n` +
        `‚ñ´Ô∏è transcription: <b>${report?.word?.transcription_1}</b>\n` +
        `‚ñ´Ô∏è pronunciation: <b>${report?.word?.pronunciation_rus}</b>\n` +
        `‚ñ´Ô∏è description: <b>${report?.word?.description.slice(0, 400)}</b>\n` +
        `‚ñ´Ô∏è example_en: <b>${report?.word?.example[report.exampleIndex].example_en}</b> <i>(#${report.exampleIndex})</i>\n` +
        `‚ñ´Ô∏è example_ru: <b>${report?.word?.example[report.exampleIndex].example_ru}</b>\n\n` +

        `‚úÖ –ì–¥–µ –æ—à–∏–±–∫–∞:\n<b>` +
        report.selectedOptions.map(opt => `‚Ä¢ ${opt}`).join('\n') + '</b>\n\n' +
        (report?.comment ? `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>${report?.comment}</b>\n\n` : '') +
        `‚è∞ <i>–í—Ä–µ–º—è: ${new Date(report.date).toLocaleString()}</i>`
    );
}

module.exports = { checkAndSendMistakeReports };
